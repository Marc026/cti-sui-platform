name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  RUST_VERSION: 'stable'

jobs:
  test-smart-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          smart-contracts/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('smart-contracts/Cargo.lock') }}
    
    - name: Install Sui CLI
      run: |
        cargo install --locked --git https://github.com/MystenLabs/sui.git --branch devnet sui
    
    - name: Build Smart Contracts
      working-directory: smart-contracts
      run: |
        sui move build
    
    - name: Test Smart Contracts
      working-directory: smart-contracts
      run: |
        sui move test
    
    - name: Run Move Prover
      working-directory: smart-contracts
      run: |
        sui move prove || echo "Move Prover completed with warnings"

  test-typescript-sdk:
    name: Test TypeScript SDK
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sdk/typescript/package-lock.json
    
    - name: Install dependencies
      working-directory: sdk/typescript
      run: npm ci
    
    - name: Run linting
      working-directory: sdk/typescript
      run: npm run lint
    
    - name: Run tests
      working-directory: sdk/typescript
      run: npm test
    
    - name: Build SDK
      working-directory: sdk/typescript
      run: npm run build
    
    - name: Generate documentation
      working-directory: sdk/typescript
      run: npm run docs

  test-python-framework:
    name: Test Python Framework
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/python/requirements.txt') }}
    
    - name: Install dependencies
      working-directory: tests/python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      working-directory: tests/python
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      working-directory: tests/python
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: tests/python/coverage.xml

  test-api:
    name: Test API Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install dependencies
      working-directory: api
      run: npm ci
    
    - name: Run linting
      working-directory: api
      run: npm run lint
    
    - name: Run tests
      working-directory: api
      run: npm test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run linting
      working-directory: frontend
      run: npm run lint
    
    - name: Type check
      working-directory: frontend
      run: npm run type-check
    
    - name: Run tests
      working-directory: frontend
      run: npm test
    
    - name: Build application
      working-directory: frontend
      run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    needs: [test-smart-contracts, test-typescript-sdk, test-python-framework, test-api, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/api
          ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/api:latest
          ghcr.io/${{ github.repository }}/api:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/frontend:latest
          ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to staging environment..."
        echo "API image: ghcr.io/${{ github.repository }}/api:${{ github.sha }}"
        echo "Frontend image: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}"
        # Add actual deployment commands here
        
    - name: Generate deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Image**: ghcr.io/${{ github.repository }}/api:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Successfully deployed" >> $GITHUB_STEP_SUMMARY

  performance-test:
    name: Performance Tests
    needs: [test-api]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: tests/python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      working-directory: tests/python
      run: |
        python -m pytest test_performance.py -v --tb=short
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/python/performance-*.json